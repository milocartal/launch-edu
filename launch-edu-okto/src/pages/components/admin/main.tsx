import { GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { getSession, signIn, signOut, useSession } from "next-auth/react";
import { type Session as SessionAuth } from 'next-auth'

import { api } from "~/utils/api";
import { EtapeType, Formation, Session, Technologie, User } from "@prisma/client";
import { Easy, Med, Hard } from "~/utils/function"

import dynamic from "next/dynamic";
import { MouseEventHandler, useState } from "react";

const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

export const getServerSideProps: GetServerSideProps<{
    session: SessionAuth;
}> = async function (context) {
    const session = await getSession(context)
    const admin = session?.user.admin

    if (!session || !admin) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

    return {
        props: { session }
    }
};

const Admin: NextPage = () => {
    //document.getElementById("defaultOpen").click();

    const [content, setContent] = useState('');
    const [tab, setTab] = useState("tech")

    const { data: sessionData } = useSession();

    const admin = sessionData?.user.admin

    const addFormation = api.formation.create.useMutation()
    const delFormation = api.formation.delete.useMutation()
    const { data: formations } = api.formation.getAll.useQuery()

    return (
        <>
            <Head>
                <title>Administration</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/okto.png" />
            </Head>
            {admin ? <main className="flex min-h-screen bg-white justify-between">
                <div className="flex flex-col items-center justify-between gap-2 min-h-screen pt-16 right-0 bg-[#0E6073] fixed m-w-xs p-2 w-[28rem]">
                    <Link href="/components/admin/addFormation"><button>Créer une formation</button></Link>

                </div>
                <div className="fixed w-full pr-40 border-b-4 border-[#63aeab] bg-white top-0 right-0 left-28 h-[4rem]" />

                <div className="flex item-center justify-start gap-12 fixed w-full pr-40  top-0 right-0 left-28 h-[4rem] text-[#63aeab]">
                    <button className="px-10 py-3 font-semibold border-[#0E6073] transition hover:border-b-4 hover:text-[#0E6073]">Vos Cours</button>
                    <button className="px-10 py-3 font-semibold  border-[#0E6073] transition hover:border-b-4 hover:text-[#0E6073]">Explorer</button>
                    <button className="px-10 py-3 font-semibold  border-[#0E6073] border-b-4 text-[#0E6073]" autoFocus>Gérez les cours</button>
                    {sessionData && sessionData.user?.image && <Link href={`/components/users/${sessionData.user.id}`}><img src={sessionData.user.image} className="max-w-[3rem]"></img></Link>}
                </div>
                <div className="flex flex-col items-center justify-between gap-2 min-h-screen top-0 left-0 bg-[#0E6073] fixed m-w-xs p-2">
                    <Link href="/"><img src="/okto.png" className="max-w-[3rem]"></img></Link>
                    <AuthShowcase />
                </div>

                <div className="flex w-full max-h-screen flex-col items-center ml-[6rem] mt-[6rem] mr-[30rem]">
                    <div className="flex flex-col w-full">
                        {formations as Formation[] && formations && formations.length > 0 && formations.map((forma) => {
                            let dif: string;
                            let hide: string;
                            switch (forma.difficulte) {
                                case 1: dif = "Débutant"; break;
                                case 2: dif = "Intermédiaire"; break;
                                case 3: dif = "Expert"; break;
                                default: dif = "Débutant";
                            }
                            if (forma.hidden)
                                hide = "Non postée"
                            else
                                hide = "Postée"
                            return (
                                <Link
                                    className="flex w-full gap-4 rounded-xl bg-[#0E6070]/10 p-4 justify-between hover:bg-[#0E6070]/20"
                                    href={`/components/admin/formations/${encodeURIComponent(forma.id)}`}
                                    key={forma.id}
                                >
                                    <h3 className="text-md font-bold">{forma.title}</h3>

                                    <span className="text-lg">
                                        {dif}
                                        {forma.difficulte === 1 && <Easy />}
                                        {forma.difficulte === 2 && <Med />}
                                        {forma.difficulte === 3 && <Hard />}
                                    </span>
                                    <span className="text-lg">
                                        {hide}
                                    </span>
                                    <button
                                        onClick={() => {
                                            delFormation.mutateAsync({ id: forma.id });
                                            window.location.reload()
                                        }}
                                        className="rounded-full bg-[#0E6073]/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-[#0E6073]/20">
                                        x
                                    </button>
                                </Link>
                            )
                        })}
                    </div>
                </div>



            </main> : <img src="https://media.discordapp.net/attachments/688793736620146689/915869475423813662/20210709_215217.gif" alt="Pas Admnin, Ratio"></img>

            }
        </>
    );
};

export default Admin;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <button
            className="rounded-full px-3 py-3 font-semibold  no-underline transition hover:bg-white/10"
            onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
            {sessionData ? <img src="/arrow.png" className="max-w-[1.5rem]"></img> : "Sign in"}
        </button>
    );
};
