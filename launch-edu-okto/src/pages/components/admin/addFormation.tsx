import { GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { getSession, signIn, signOut, useSession } from "next-auth/react";
import { type Session as SessionAuth } from 'next-auth'

import { api } from "../../../utils/api";
import { EtapeType, Session, Technologie, User, Formation } from '@prisma/client';

import dynamic from "next/dynamic";
import { MouseEventHandler, useState } from "react";

const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

export const getServerSideProps: GetServerSideProps<{
    session: SessionAuth;
}> = async function (context) {
    const session = await getSession(context)
    const admin = session?.user.admin

    if (!session || !admin) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

    return {
        props: { session }
    }
};

const Admin: NextPage = () => {
    //document.getElementById("defaultOpen").click();

    const [content, setContent] = useState('');
    const [tab, setTab] = useState("normal")

    const { data: sessionData } = useSession();

    const user = sessionData?.user.admin

    const addtech = api.technologie.create.useMutation()
    const deltech = api.technologie.delete.useMutation()
    const { data: techList } = api.technologie.getAll.useQuery()

    const addtype = api.type.create.useMutation()
    const deltype = api.type.delete.useMutation()
    const { data: typeList } = api.type.getAll.useQuery()

    const addFormation = api.formation.create.useMutation()
    const delFormation = api.formation.delete.useMutation()
    const { data: formations } = api.formation.getAll.useQuery()


    async function handlerAddTech(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            techName: { value: string };
        };
        const nameT = target.techName.value; // typechecks!
        console.log(nameT)
        const techno = await addtech.mutateAsync({ name: nameT })
    }

    async function handleFormation(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            formTitle: { value: string };
            description: { value: string };
            difficulte: { value: string };
            techno: { value: string }
        };
        const title = target.formTitle.value;
        //const desc = target.description.value;
        const diff: number = +target.difficulte.value;
        const techno = target.techno.value;
        //console.log("Info Ta mere ",title," ", content," ", diff," ", techno)
        await addFormation.mutateAsync({ title: title, description: content, difficulte: diff, techno: techno })
    }

    async function normal(event: React.SyntheticEvent) {
        setTab('normal')
    }
    async function techAdd(event: React.SyntheticEvent) {
        setTab('tech')
    }


    return (
        <>
            <Head>
                <title>Créer une Formation</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/okto.png" />
            </Head>
            {user ? <main className="flex min-h-screen bg-white justify-between">


                <div className="fixed w-full pr-40 border-b-4 border-[#63aeab] bg-white top-0 right-0 left-28 h-[4rem]" />

                <div className="flex item-center justify-start gap-12 fixed w-full pr-40  top-0 right-0 left-28 h-[4rem] text-[#63aeab]">
                    <button className="px-10 py-3 font-semibold border-[#0E6073] transition hover:border-b-4 hover:text-[#0E6073]">Vos Cours</button>
                    <button className="px-10 py-3 font-semibold  border-[#0E6073] transition hover:border-b-4 hover:text-[#0E6073]">Explorer</button>
                    <button className="px-10 py-3 font-semibold  border-[#0E6073] border-b-4 text-[#0E6073]" autoFocus>Gérez les cours</button>
                    {sessionData && sessionData.user?.image && <Link href={`/components/users/${sessionData.user.id}`}><img src={sessionData.user.image} className="max-w-[3rem]"></img></Link>}
                </div>
                <div className="flex flex-col items-center justify-between gap-2 min-h-screen top-0 left-0 bg-[#0E6073] fixed m-w-xs p-2">
                    <Link href="/"><img src="/okto.png" className="max-w-[3rem]"></img></Link>
                    <AuthShowcase />
                </div>


                <div className="flex w-full max-h-screen ml-[6rem] gap-10 mt-28">

                    <div className="flex flex-col gap-4 h-[15rem]" id="listTech">
                        {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                            return (
                                <div className="container flex items-center justify-between p-5 bg-pink-500" key={techno.id}>
                                    <p className="">{techno.name}</p>
                                    <button
                                        onClick={() => {
                                            deltech.mutateAsync({ id: techno.id });
                                            window.location.reload()
                                        }}
                                        className="rounded-full bg-[#0E6073]/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-[#0E6073]/20">
                                        x
                                    </button>
                                </div>
                            )
                        })}
                    </div>


                    <form onSubmit={handleFormation} className="flex flex-col gap-5 item-center" method="POST">
                        <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[3rem]">Créer une formation</h1>

                        <input name="formTitle" id="formTitle" type="text" placeholder="Titre de la formation" required></input>


                        <QuillNoSSRWrapper theme="snow" onChange={setContent} placeholder="Description" />
                        <fieldset className="mt-8 flex">
                            <legend >Choisir la difficulté:</legend>

                            <label htmlFor="1" className="mt-8">débutant</label>
                            <input type="radio" name="difficulte" id="1" value="1"/>

                            <label htmlFor="2" className="mt-8">normal</label>
                            <input type="radio" name="difficulte" id="2" value="2"/>

                            <label htmlFor="3" className="mt-8">hard</label>
                            <input type="radio" name="difficulte" id="3" value="3"/>
                        </fieldset>

                        <label htmlFor="techno" className="">Choisir une technologie:</label>
                            <select id="techno" name="techno" required>
                                {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                                    return (
                                        <option value={techno.id} key={techno.id}>{techno.name}</option>
                                    )
                                })}
                            </select>



                        <div className="flex gap-2">
                            <input type="checkbox" id="hid" name="hid" required className="shadow-none" /><label htmlFor="hid"> En cochant cette case, vous êtes au courant que la formation créée sera invisible pour les utilisateurs.</label>
                        </div>
                        <button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit" value="submit">Ajouter</button>
                    </form>
                    {tab === "tech" &&
                        <div className="fixed w-full h-full bg-[#0E6073]/90 top-0 right-0 left-0 bottom-0 flex justify-center items-center">
                            <form onSubmit={handlerAddTech} className="flex flex-col gap-5 item-center justify-center bg-white rounded-xl p-8" method="POST">
                                <h1 className="text-3xl font-extrabold tracking-tight "><label htmlFor="techName">Nouvelle Technologie</label></h1>
                                <input name="techName" id="techName" type="text" placeholder="Nom de la technologie" required></input>
                                <input name="logoTech" id="logoTech" type="url" placeholder="URL du Logo" required></input>
                                <button onClick={normal} className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit">Ajouter</button>
                            </form>
                        </div>}


                </div>


            </main> : <img src="https://media.discordapp.net/attachments/688793736620146689/915869475423813662/20210709_215217.gif" alt="Pas Admnin, Ratio"></img>

            }
        </>
    );
};

export default Admin;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <button
            className="rounded-full px-3 py-3 font-semibold  no-underline transition hover:bg-white/10"
            onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
            {sessionData ? <img src="/arrow.png" className="max-w-[1.5rem]"></img> : "Sign in"}
        </button>
    );
};
