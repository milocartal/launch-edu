import { type NextPage } from 'next';
import { GetServerSideProps } from 'next'
import { InferGetServerSidePropsType } from 'next'
import { getServerSession } from "next-auth";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { prisma } from '~/server/db';
import { Formation, Technologie } from '@prisma/client';
import { useState } from 'react';

export const getServerSideProps: GetServerSideProps<{
    tech: Technologie;
}> = async function (context) {
    const tech = await prisma.technologie.findUnique({
        where: {
            id: context.query.id as string
        },
    });
    return {
        props: {
            tech: JSON.parse(JSON.stringify(tech)) as Technologie
        }
    };
};

const Technologies: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ tech }) => {
    const { data: sessionData } = useSession();
    const admin = sessionData?.user.admin
    const [tab, setTab] = useState("tech")

    const idf = tech.id
    const { data: formations } = api.formation.getAllTech.useQuery({ id: idf })

    async function visuAll(event: React.SyntheticEvent) {
        setTab('tech')
    }
    async function etapeTab(event: React.SyntheticEvent) {
        setTab('etape')
    }
    async function formationTab(event: React.SyntheticEvent) {
        setTab('formation')
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="flex min-h-screen bg-white justify-between">
                <div className="flex item-center justify-between gap-36 fixed ml-28 w-full pr-40 border-b-4 border-[#0E6073]">
                    <button onClick={visuAll} className="px-10 py-3 font-semibold border-[#0E6073] transition hover:border-b-2  focus:border-b-2" autoFocus>Technologies</button>
                    <button onClick={etapeTab} className="px-10 py-3 font-semibold  border-[#0E6073] transition hover:border-b-2  focus:border-b-2">Ã‰tapes</button>
                    <button onClick={formationTab} className="px-10 py-3 font-semibold  border-[#0E6073] transition hover:border-b-2  focus:border-b-2">Formations</button>
                    {sessionData && sessionData.user?.image && <img src={sessionData.user?.image} className="max-w-[4rem] max-h-[4rem]"></img>}
                </div>
                <div className="flex flex-col items-center justify-between gap-2 min-h-screen top-0 left-0 bg-[#0E6073] fixed m-w-xs p-2">
                    <Link href="/"><img src="/okto.png" className="max-w-[3rem]"></img></Link>

                    <AuthShowcase />
                </div>
                <div className="flex w-full max-h-screen flex-col  ml-[6rem] mt-[5rem]">
                    <h1 className="text-5xl font-extrabold text-[#0E6073] tracking-tight">Tous nos cours de {tech.name}</h1>
                    <div className="grid grid-cols-1 gap-4 sm:grid-cols-3 md:gap-8">
                        {formations as Formation[] && formations && formations.length > 0 && formations.map((forma) => {
                            return (
                                <Link
                                    className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 transition hover:bg-[#0e6073]/20"
                                    href={`/components/formations/${encodeURIComponent(forma.id)}`}
                                    key={forma.id}
                                >
                                    <h3 className="text-2xl font-bold">{forma.title}</h3>
                                    <div className="text-lg" dangerouslySetInnerHTML={{ __html: forma.description }} />

                                    <div className="text-lg">
                                        <p>{forma.updatedAt.getDate()}/{forma.updatedAt.getMonth()}/{forma.updatedAt.getFullYear()} at {forma.updatedAt.getHours()}:{forma.updatedAt.getMinutes()}</p>
                                    </div>
                                </Link>
                            )
                        })}
                    </div>
                </div>



            </main>
        </>
    );
};

export default Technologies;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();
  
    return (
      <div>
        {sessionData?.user.admin && <Link href="/components/admin"><img src="https://icones.pro/wp-content/uploads/2022/02/services-parametres-et-icone-d-engrenage-gris.png" className="max-w-[3rem]"></img></Link>}
        <button
          className="rounded-full px-3 py-3 font-semibold  no-underline transition hover:bg-white/10"
          onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
          {sessionData ? <img src="/arrow.png" className="max-w-[1.5rem]"></img> : <img src='https://cdn-icons-png.flaticon.com/512/1250/1250689.png' className="max-w-[1.5rem]"></img>}
        </button>
      </div>
  
    );
  };