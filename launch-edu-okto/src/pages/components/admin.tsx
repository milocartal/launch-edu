import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../../utils/api";
import { EtapeType, Technologie, User } from "@prisma/client";

import dynamic from "next/dynamic";
import { useState } from "react";

const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

const Tech: NextPage = () => {
    const [content, setContent] = useState('');

    const { data: sessionData } = useSession();
    const { data: users } = api.user.getAdmin.useQuery()

    const user = sessionData?.user.admin

    const addtech = api.technologie.create.useMutation()
    const deltech = api.technologie.delete.useMutation()
    const { data: techList } = api.technologie.getAll.useQuery()

    const addtype = api.type.create.useMutation()
    const deltype = api.type.delete.useMutation()
    const { data: typeList } = api.type.getAll.useQuery()

    const addFormation = api.formation.create.useMutation()
    const delFormation = api.formation.delete.useMutation()
    const { data: formations } = api.formation.getAll.useQuery()


    async function handlerAddTech(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            techName: { value: string };
        };
        const nameT = target.techName.value; // typechecks!
        console.log(nameT)
        const techno = await addtech.mutateAsync({ name: nameT })
    }

    async function handlerAddType(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            typeName: { value: string };
        };
        const nameT = target.typeName.value; // typechecks!
        console.log(nameT)
        const type = await addtype.mutateAsync({ name: nameT })
    }

    async function handleFormation(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            formTitle: { value: string };
            description: { value: string };
            difficulte: { value: string };
            techno: { value: string }
        };
        const title = target.formTitle.value;
        //const desc = target.description.value;
        const diff: number = +target.difficulte.value;
        const techno = target.techno.value;
        //console.log("Info Ta mere ",title," ", content," ", diff," ", techno)
        await addFormation.mutateAsync({ title: title, description: content, difficulte: diff, techno: techno })
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {user ? <main className="flex min-h-screen bg-white justify-between">
                <div className="flex flex-col items-center justify-center gap-2 min-h-screen top-0 left-0 bg-[#0E6073] fixed m-w-xs">
                    <img src="https://www.oktopod.io/wp-content/uploads/2019/11/Oktopod-carr%C3%A9-blanc.png" className="max-w-[5rem]"></img>
                    <AuthShowcase />
                    <Link href="/"><button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20">Home</button></Link>
                    <Link href="/components/formation"><button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20">Liste Formations</button></Link>
                </div>
                <div className="flex max-h-screen flex-col items-center ml-[20rem]">
                    <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[5rem] fixed">
                        Oktopod <span className="text-[hsl(280,100%,70%)]">Student</span> Plateform
                    </h1>

                    <div className="flex gap-10 mt-28">
                        <div id="technologie-form" >
                            <form onSubmit={handlerAddTech} className="flex flex-col gap-5 item-center justify-center" method="POST">
                                <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[3rem]">Technologie</h1>
                                <label htmlFor="techName" className="">Tech Name</label>
                                <input name="techName" id="techName" type="text" placeholder="name of the tech"></input>
                                <button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit">Ajouetr</button>
                            </form>

                            <ul className="overscroll-contain">
                                {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                                    return (
                                        <li className="container flex items-center justify-center gap-12 py-5" key={techno.id}>
                                            <p className="">{techno.name}</p>
                                            <button
                                                onClick={() => {
                                                    deltech.mutateAsync({ id: techno.id });
                                                    window.location.reload()
                                                }}
                                                className="rounded-full bg-[#0E6073]/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-[#0E6073]/20">
                                                x
                                            </button>
                                        </li>
                                    )
                                })}
                            </ul>
                        </div>

                        <div id="type-etape-formulaire">
                            <form onSubmit={handlerAddType} className="flex flex-col gap-5 item-center justify-center" method="POST">
                                <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[3rem]">Type d'Étape</h1>
                                <label htmlFor="typeName" className="">Type Name</label>
                                <input name="typeName" id="typeName" type="text" placeholder="name of the type"></input>
                                <button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit">Ajouter</button>
                            </form>

                            <ul>
                                {typeList as EtapeType[] && typeList && typeList.length > 0 && typeList.map((typ) => {
                                    return (
                                        <li className="container flex items-center justify-center gap-12 py-5" key={typ.id}>
                                            <p className="">{typ.name}</p>
                                            <button
                                                onClick={() => {
                                                    deltype.mutateAsync({ id: typ.id });
                                                    window.location.reload()
                                                }}
                                                className="rounded-full bg-[#0E6073]/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-[#0E6073]/20">
                                                x
                                            </button>
                                        </li>
                                    )
                                })}
                            </ul>
                        </div>

                        <form onSubmit={handleFormation} className="flex flex-col gap-5 item-center justify-center" method="POST">
                            <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[3rem]">Formation</h1>

                            <label htmlFor="formTitle" className="">Titre</label>
                            <input name="formTitle" id="formTitle" type="text" placeholder="Title of the formation" required></input>

                            <p className="">Description</p>


                            <QuillNoSSRWrapper theme="snow" onChange={setContent} className="" />

                            <label htmlFor="difficulte" className="mt-8">Choisir la difficulté:</label>
                            <select id="difficulte" name="difficulte" required defaultValue="1">
                                <option value="1">Simple</option>
                                <option value="2">Moyen</option>
                                <option value="3">Difficile</option>
                            </select>

                            <label htmlFor="techno" className="">Choisir une technologie:</label>
                            <select id="techno" name="techno" required>
                                {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                                    return (
                                        <option value={techno.id} key={techno.id}>{techno.name}</option>
                                    )
                                })}
                            </select>
                            <button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit" value="submit">Ajouter</button>
                        </form>
                    </div>
                </div>


            </main> :

                <div className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
                    <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[5rem]">
                        Pas <span className="text-[hsl(280,100%,70%)]">Admin</span>
                    </h1>
                    <Link href="/"><button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20">Home</button></Link>
                </div>}
        </>
    );
};

export default Tech;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <div className="flex flex-col items-center justify-center gap-4">
            <p className="text-center text-2xl ">
                {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
            </p>
            <button
                className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
                {sessionData ? "Sign out" : "Sign in"}
            </button>

        </div>
    );
};
