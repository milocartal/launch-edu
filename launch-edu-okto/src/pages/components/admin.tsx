import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../../utils/api";
import { EtapeType, Technologie } from "@prisma/client";

const Tech: NextPage = () => {
    const { data: sessionData } = useSession();

    const addtech = api.technologie.create.useMutation()
    const deltech = api.technologie.delete.useMutation()
    const { data: techList } = api.technologie.getAll.useQuery()

    const addtype = api.type.create.useMutation()
    const deltype = api.type.delete.useMutation()
    const { data: typeList } = api.type.getAll.useQuery()


    async function handlerAddTech(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            techName: { value: string };
        };
        const nameT = target.techName.value; // typechecks!
        console.log(nameT)
        const techno = await addtech.mutateAsync({ name: nameT })
    }

    async function handlerAddType(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            typeName: { value: string };
        };
        const nameT = target.typeName.value; // typechecks!
        console.log(nameT)
        const techno = await addtype.mutateAsync({ name: nameT })
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
                <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
                    <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Oktopod <span className="text-[hsl(280,100%,70%)]">Student</span> Plateform
                    </h1>
                    <AuthShowcase />
                    <Link href="/"><button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20">Home</button></Link>
                </div>

                <div>
                    <form onSubmit={handlerAddTech} className="flex flex-col gap-5 item-center justify-center">
                        <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[3rem]">Add Tech</h1>
                        <label htmlFor="techName" className="text-white">Tech Name</label>
                        <input name="techName" id="techName" type="text" placeholder="name of the tech"></input>
                        <button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20" type="submit">Tech+</button>
                    </form>

                    <ul>
                        {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                            return (
                                <li className="container flex items-center justify-center gap-12 py-5">
                                    <p className="text-white">{techno.name}</p>
                                    <button
                                        onClick={() => {
                                            deltech.mutateAsync({ id: techno.id });
                                            window.location.reload()
                                        }}
                                        className="rounded-full bg-white/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-white/20">
                                        x
                                    </button>
                                </li>

                            )
                        })}
                    </ul>
                </div>

                <div>
                    <form onSubmit={handlerAddType} className="flex flex-col gap-5 item-center justify-center">
                        <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[3rem]">Add Type</h1>
                        <label htmlFor="techName" className="text-white">Type Name</label>
                        <input name="techName" id="techName" type="text" placeholder="name of the tech"></input>
                        <button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20" type="submit">Tech+</button>
                    </form>

                    <ul>
                        {typeList as EtapeType[] && typeList && typeList.length > 0 && typeList.map((typ) => {
                            return (
                                <li className="container flex items-center justify-center gap-12 py-5">
                                    <p className="text-white">{typ.name}</p>
                                    <button
                                        onClick={() => {
                                            deltype.mutateAsync({ id: typ.id });
                                            window.location.reload()
                                        }}
                                        className="rounded-full bg-white/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-white/20">
                                        x
                                    </button>
                                </li>

                            )
                        })}
                    </ul>
                </div>
                
                

            </main>
        </>
    );
};

export default Tech;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    const { data: secretMessage } = api.user.getSecretMessage.useQuery(
        undefined, // no input
        { enabled: sessionData?.user !== undefined },
    );

    return (
        <div className="flex flex-col items-center justify-center gap-4">
            <p className="text-center text-2xl text-white">
                {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
                {secretMessage && <span> - {secretMessage}</span>}
            </p>
            <button
                className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
                {sessionData ? "Sign out" : "Sign in"}
            </button>
        </div>
    );
};
