import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../../utils/api";
import { EtapeType, Technologie, User } from "@prisma/client";

const Tech: NextPage = () => {
    const { data: sessionData } = useSession();
    const { data: users } = api.user.getAll.useQuery()

    const user = sessionData?.user.admin

    const addtech = api.technologie.create.useMutation()
    const deltech = api.technologie.delete.useMutation()
    const { data: techList } = api.technologie.getAll.useQuery()

    const addtype = api.type.create.useMutation()
    const deltype = api.type.delete.useMutation()
    const { data: typeList } = api.type.getAll.useQuery()

    const addFormation = api.formation.create.useMutation()
    const delFormation = api.formation.delete.useMutation()
    const { data: formations } = api.formation.getAll.useQuery()


    async function handlerAddTech(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            techName: { value: string };
        };
        const nameT = target.techName.value; // typechecks!
        console.log(nameT)
        const techno = await addtech.mutateAsync({ name: nameT })
    }

    async function handlerAddType(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            typeName: { value: string };
        };
        const nameT = target.typeName.value; // typechecks!
        console.log(nameT)
        const type = await addtype.mutateAsync({ name: nameT })
    }

    async function handleFormation(event: React.SyntheticEvent) {
        event.preventDefault()
        const target = event.target as typeof event.target & {
            formTitle: { value: string };
            description: { value: string };
            difficulte: { value: string };
            techno: { value: string }
            prof: { value: string }
        };
        const title = target.formTitle.value;
        const desc = target.description.value;
        const diff: number = +target.difficulte.value;
        const techno = target.techno.value;
        const prof = target.prof.value;
        //console.log("Info Ta mere ",title," ", desc," ", diff," ", techno)
        await addFormation.mutateAsync({ title: title, description: desc, difficulte: diff, techno: techno })
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {user ? <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
                <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
                    <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Oktopod <span className="text-[hsl(280,100%,70%)]">Student</span> Plateform
                    </h1>
                    <AuthShowcase />
                    <Link href="/"><button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20">Home</button></Link>
                    <Link href="/components/formation"><button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20">Liste Formations</button></Link>

                </div>

                <div className="flex gap-10">
                    <div id="technologie-form">
                        <form onSubmit={handlerAddTech} className="flex flex-col gap-5 item-center justify-center" method="POST">
                            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[3rem]">Technologie</h1>
                            <label htmlFor="techName" className="text-white">Tech Name</label>
                            <input name="techName" id="techName" type="text" placeholder="name of the tech"></input>
                            <button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20" type="submit">Ajouetr</button>
                        </form>

                        <ul>
                            {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                                return (
                                    <li className="container flex items-center justify-center gap-12 py-5" key={techno.id}>
                                        <p className="text-white">{techno.name}</p>
                                        <button
                                            onClick={() => {
                                                deltech.mutateAsync({ id: techno.id });
                                                window.location.reload()
                                            }}
                                            className="rounded-full bg-white/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-white/20">
                                            x
                                        </button>
                                    </li>
                                )
                            })}
                        </ul>
                    </div>

                    <div id="type-etape-formulaire">
                        <form onSubmit={handlerAddType} className="flex flex-col gap-5 item-center justify-center" method="POST">
                            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[3rem]">Type d'Étape</h1>
                            <label htmlFor="typeName" className="text-white">Type Name</label>
                            <input name="typeName" id="typeName" type="text" placeholder="name of the type"></input>
                            <button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20" type="submit">Ajouter</button>
                        </form>

                        <ul>
                            {typeList as EtapeType[] && typeList && typeList.length > 0 && typeList.map((typ) => {
                                return (
                                    <li className="container flex items-center justify-center gap-12 py-5" key={typ.id}>
                                        <p className="text-white">{typ.name}</p>
                                        <button
                                            onClick={() => {
                                                deltype.mutateAsync({ id: typ.id });
                                                window.location.reload()
                                            }}
                                            className="rounded-full bg-white/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-white/20">
                                            x
                                        </button>
                                    </li>
                                )
                            })}
                        </ul>
                    </div>

                    <form onSubmit={handleFormation} className="flex flex-col gap-5 item-center justify-center" method="POST">
                        <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[3rem]">Formation</h1>

                        <label htmlFor="formTitle" className="text-white">Titre</label>
                        <input name="formTitle" id="formTitle" type="text" placeholder="Title of the formation" required></input>

                        <label htmlFor="description" className="text-white">Description</label>
                        <textarea name="description" id="description" placeholder="Description de la formation" required></textarea>

                        <label htmlFor="difficulte" className="text-white">Choisir la difficulté:</label>
                        <select id="difficulte" name="difficulte" required defaultValue="1">
                            <option value="1">Simple</option>
                            <option value="2">Moyen</option>
                            <option value="3">Difficile</option>
                        </select>

                        <label htmlFor="prof" className="text-white">Choisir une technologie:</label>
                        <select id="prof" name="prof" required>
                            {users as User[] && users && users.length > 0 && users.map((user) => {
                                return (
                                    <option value={user.id} key={user.id}>{user.name}</option>
                                )
                            })}
                        </select>

                        <label htmlFor="techno" className="text-white">Choisir une technologie:</label>
                        <select id="techno" name="techno" required>
                            {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                                return (
                                    <option value={techno.name} key={techno.id}>{techno.name}</option>
                                )
                            })}
                        </select>
                        <button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20" type="submit" value="submit">Ajouter</button>
                    </form>
                </div>

            </main> :

                <div className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
                    <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Pas <span className="text-[hsl(280,100%,70%)]">Admin</span>
                    </h1>
                    <Link href="/"><button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20">Home</button></Link>
                </div>}
        </>
    );
};

export default Tech;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <div className="flex flex-col items-center justify-center gap-4">
            <p className="text-center text-2xl text-white">
                {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
            </p>
            <button
                className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
                {sessionData ? "Sign out" : "Sign in"}
            </button>

        </div>
    );
};
