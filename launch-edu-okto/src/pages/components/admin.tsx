import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../../utils/api";
import { EtapeType, Technologie, User } from "@prisma/client";

import dynamic from "next/dynamic";
import { MouseEventHandler, useState } from "react";

const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

const Tech: NextPage = () => {
    //document.getElementById("defaultOpen").click();

    const [content, setContent] = useState('');
    const [tab, setTab] = useState("tech")

    const { data: sessionData } = useSession();

    const user = sessionData?.user.admin

    const addtech = api.technologie.create.useMutation()
    const deltech = api.technologie.delete.useMutation()
    const { data: techList } = api.technologie.getAll.useQuery()

    const addtype = api.type.create.useMutation()
    const deltype = api.type.delete.useMutation()
    const { data: typeList } = api.type.getAll.useQuery()

    const addFormation = api.formation.create.useMutation()
    const delFormation = api.formation.delete.useMutation()
    const { data: formations } = api.formation.getAll.useQuery()


    async function handlerAddTech(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            techName: { value: string };
        };
        const nameT = target.techName.value; // typechecks!
        console.log(nameT)
        const techno = await addtech.mutateAsync({ name: nameT })
    }

    async function handlerAddType(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            typeName: { value: string };
        };
        const nameT = target.typeName.value; // typechecks!
        console.log(nameT)
        const type = await addtype.mutateAsync({ name: nameT })
    }

    async function handleFormation(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            formTitle: { value: string };
            description: { value: string };
            difficulte: { value: string };
            techno: { value: string }
        };
        const title = target.formTitle.value;
        //const desc = target.description.value;
        const diff: number = +target.difficulte.value;
        const techno = target.techno.value;
        //console.log("Info Ta mere ",title," ", content," ", diff," ", techno)
        await addFormation.mutateAsync({ title: title, description: content, difficulte: diff, techno: techno })
    }

    async function techTab(event: React.SyntheticEvent) {
        setTab('tech')
    }
    async function etapeTab(event: React.SyntheticEvent) {
        setTab('etape')
    }
    async function formationTab(event: React.SyntheticEvent) {
        setTab('formation')
    }

    return (
        <>
            <Head>
                <title>Admin</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/okto.png" />
            </Head>
            {user ? <main className="flex min-h-screen bg-white justify-between">
                <div className="flex item-center justify-end gap-36 fixed pl-16 w-full pr-10 border-b-2 border-[#0E6073]">
                    <button onClick={techTab} className="px-10 py-3 font-semibold border-[#0E6073] transition hover:border-b-2  focus:border-b-2" autoFocus>Technologies</button>
                    <button onClick={etapeTab} className="px-10 py-3 font-semibold  border-[#0E6073] transition hover:border-b-2  focus:border-b-2">Étapes</button>
                    <button onClick={formationTab} className="px-10 py-3 font-semibold  border-[#0E6073] transition hover:border-b-2  focus:border-b-2">Formations</button>
                    {sessionData && sessionData.user?.image && <img src={sessionData.user?.image} className="max-w-[4rem] max-h-[4rem]"></img>}
                </div>
                <div className="flex flex-col items-center justify-between gap-2 min-h-screen top-0 left-0 bg-[#0E6073] fixed m-w-xs p-2">
                    <Link href="/"><img src="/okto.png" className="max-w-[3rem]"></img></Link>
                    <AuthShowcase />
                </div>

                <div className="flex w-full max-h-screen flex-col items-center ml-[6rem] mt-28">
                    <div className="flex gap-10 mt-28">
                        {tab === "tech" &&
                            <div id="technologie-form" >
                                <form onSubmit={handlerAddTech} className="flex flex-col gap-5 item-center justify-center" method="POST">
                                    <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[3rem]"><label htmlFor="techName">Technologies</label></h1>
                                    <input name="techName" id="techName" type="text" placeholder="Nouvelle technologie"></input>
                                    <button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit">Ajouter</button>
                                </form>

                                <div className="grid grid-cols-1 gap-4 sm:grid-cols-5 md:gap-8">
                                    {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                                        return (
                                            <div className="container flex items-center justify-center gap-12 py-5" key={techno.id}>
                                                <p className="">{techno.name}</p>
                                                <button
                                                    onClick={() => {
                                                        deltech.mutateAsync({ id: techno.id });
                                                        window.location.reload()
                                                    }}
                                                    className="rounded-full bg-[#0E6073]/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-[#0E6073]/20">
                                                    x
                                                </button>
                                            </div>
                                        )
                                    })}
                                </div>
                            </div>
                        }

                        {tab === "etape" &&
                            <div id="type-etape-formulaire">
                                <form onSubmit={handlerAddType} className="flex flex-col gap-5 item-center justify-center" method="POST">
                                    <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[3rem]"><label htmlFor="typeName">Types des étapes</label></h1>
                                    <input name="typeName" id="typeName" type="text" placeholder="Nouveau type pour les étapes"></input>
                                    <button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit">Ajouter</button>
                                </form>

                                <div className="grid grid-cols-1 gap-4 sm:grid-cols-3 md:gap-8">
                                    {typeList as EtapeType[] && typeList && typeList.length > 0 && typeList.map((typ) => {
                                        return (
                                            <div className="container flex items-center justify-center gap-12 py-5" key={typ.id}>
                                                <p className="">{typ.name}</p>
                                                <button
                                                    onClick={() => {
                                                        deltype.mutateAsync({ id: typ.id });
                                                        window.location.reload()
                                                    }}
                                                    className="rounded-full bg-[#0E6073]/10 px-3 py-1 font-semibold text-red-600 no-underline transition hover:bg-[#0E6073]/20">
                                                    x
                                                </button>
                                            </div>
                                        )
                                    })}
                                </div>
                            </div>
                        }

                        {tab === "formation" &&
                            <form onSubmit={handleFormation} className="flex flex-col gap-5 item-center justify-center" method="POST">
                                <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[3rem]">Créer une formation</h1>

                                <input name="formTitle" id="formTitle" type="text" placeholder="Titre de la formation" required></input>


                                <QuillNoSSRWrapper theme="snow" onChange={setContent} className="" placeholder="Description"/>

                                <label htmlFor="difficulte" className="mt-8">Choisir la difficulté:</label>
                                <select id="difficulte" name="difficulte" required defaultValue="1">
                                    <option value="1">Débutant</option>
                                    <option value="2">Intermédiare</option>
                                    <option value="3">Avancé</option>
                                </select>

                                <label htmlFor="techno" className="">Choisir une technologie:</label>
                                <select id="techno" name="techno" required>
                                    {techList as Technologie[] && techList && techList.length > 0 && techList.map((techno) => {
                                        return (
                                            <option value={techno.id} key={techno.id}>{techno.name}</option>
                                        )
                                    })}
                                </select>
                                
                                <div className="flex gap-2">
                                <input type="checkbox" id="hid" name="hid" required className="shadow-none"/><label htmlFor="hid"> En cochant cette case, vous êtes au courant que la formation créée sera invisible pour les utilisateurs.</label>
                                </div>
                                <button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20" type="submit" value="submit">Ajouter</button>
                            </form>
                        }

                    </div>
                </div>


            </main> :

                <div className="flex min-h-screen flex-col items-center justify-center bg-white">
                    <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[5rem]">
                        Pas <span className="text-[#0E6373]">Admin</span>
                    </h1>
                    <Link href="/"><button className="rounded-full bg-[#0E6073]/10 px-10 py-3 font-semibold  no-underline transition hover:bg-[#0E6073]/20">Home</button></Link>
                </div>}
        </>
    );
};

export default Tech;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <button
            className="rounded-full px-3 py-3 font-semibold  no-underline transition hover:bg-white/10"
            onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
            {sessionData ? <img src="/arrow.png" className="max-w-[1.5rem]"></img> : "Sign in"}
        </button>
    );
};
