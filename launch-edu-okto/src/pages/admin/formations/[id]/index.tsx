import { type NextPage } from 'next';
import { type GetServerSideProps } from 'next'
import { type InferGetServerSidePropsType } from 'next'
import Head from "next/head";
import Link from "next/link";
import Image from 'next/image'
import { getSession, signIn, signOut, useSession } from "next-auth/react";
import { FaArrowLeft, FaPenAlt, FaPlay } from "react-icons/fa";

import { api } from "~/utils/api";
import Header from "../../../components/header";
import { prisma } from '~/server/db';
import { Technologie, type Formation, Lecon, Etape, Prisma } from '@prisma/client';
import { DifficultyText } from '../../../components/difficulties';
import etapes from '../../../etapes/[id]';
import { useState } from 'react';
import { HiXMark } from 'react-icons/hi2';
import dynamic from 'next/dynamic';

const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

type LeconWithEtapes = Prisma.LeconGetPayload<{
    include: { etapes: true }
}>

export const getServerSideProps: GetServerSideProps<{
    formation: (Formation & {
        techs: Technologie[];
        lecons: LeconWithEtapes[];
    });
}> = async function (context) {
    const session = await getSession(context)
    const admin = session?.user.admin

    if (!session || !admin) {
      return {
        redirect: {
          destination: '/',
          permanent: false,
        },
      }
    }
    
    const formation = await prisma.formation.findUnique({
        where: {
            id: context.query.id as string
        },
        include: {
            techs: true,
            lecons: {
                include: {
                    etapes: true
                }
            }
        }
    });
    if (!formation) {
        return {
            redirect: {
                destination: '/formation',
                permanent: false,
            },
        }
    }
    return {
        props: {
            formation: JSON.parse(JSON.stringify(formation)) as (Formation & {
                techs: Technologie[];
                lecons: LeconWithEtapes[];
            })
        }
    };
};

const Formations: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ formation }) => {
    const { data: sessionData } = useSession();
    const admin = sessionData?.user.admin

    const [tab, setTab] = useState("normal")
    const [content, setContent] = useState(formation.description);

    const idf = formation.id
    const updateFormation = api.formation.update.useMutation()

    const addLecon = api.lecon.create.useMutation()
    const delLecon = api.lecon.delete.useMutation()
    const { data: lecons } = api.lecon.getAll.useQuery({ id: idf })

    const { data: techList } = api.technologie.getAll.useQuery()

    async function handleFormation(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            formTitle: { value: string };
            description: { value: string };
            difficulte: { value: string };
        };
        const title = target.formTitle.value;
        const diff: number = +target.difficulte.value;
        

        await updateFormation.mutateAsync({id: formation.id, title: title, description: content, difficulte: diff })
    }

    return (
        <>
            <Head>
                <title>{formation.title}</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/okto.png" />
            </Head>

            <main className="flex min-h-screen h-max bg-white pl-24 pt-20 pb-10 w-full justify-between">

                <section className='w-6/12 h-full flex flex-col justify-between items-center'>
                    <div className="flex flex-col gap-5 w-full">
                        <div className="flex flex-row items-center justify-start">
                            <Link href="/admin/main"><FaArrowLeft className="h-6 w-6 text-[#0E6073] mr-5" /></Link>
                            <h1 className="text-3xl font-bold tracking-tight text-[#0E6073]">{formation.title}</h1>
                        </div>
                        <div className="flex flex-col items-center w-full">
                            <div className="flex flex-row items-center justify-between w-full">
                                <h2 className="text-xl font-bold tracking-tight text-[#0E6073]">Description</h2>
                                <div className="flex flex-row ">
                                    <div className="flex flex-row items-center">
                                        {<DifficultyText level={formation.difficulte}/>}
                                    </div>
                                    <div className="flex flex-row items-center ml-4">
                                        <FaPenAlt className="h-7 w-7 text-[#989898]" />
                                        <p className="ml-2 text-sm font-Inter text-[#989898]">{formation.lecons.length} leçon(s)</p>
                                    </div>
                                </div>
                            </div>
                            <div className="text-sm font-Inter text-[#222222] self-start mt-6" dangerouslySetInnerHTML={{ __html: formation.description }} />
                            <div className="flex flex-col w-full my-10">
                                <h2 className="text-xl font-bold tracking-tight text-[#0E6073]">Thématique(s)</h2>

                                <div className="w-11/12">
                                    {formation.techs as Technologie[] && formation.techs.length > 0 && formation.techs.map((tech) => {
                                        return (
                                            <div className="w-1/3 flex justify-center py-5 shadow-md mt-1 bg-[#0E6070] text-white rounded-lg" key={tech.id}>
                                                <p className="text-base font-bold tracking-tight">{tech.name}</p>
                                            </div>)
                                    })}
                                </div>
                            </div>
                        </div>
                    </div>

                    <button className="h-[5rem] w-5/6 text-white bg-[#0e6073] rounded-lg hover:cursor-pointer transition hover:bg-[#0E6073]/80" onClick={(e) => setTab("modif")}>Modifier le formation</button>

                </section>


                <aside className="w-5/12 right-0 flex flex-col items-center justify-start h-5/6 pt-10 mr-5">
                    <h2 className="text-xl font-bold tracking-tight text-[#0E6073] self-start mb-3">Leçon(s) dans la formation</h2>
                    <div className="flex flex-col max-h-full w-11/12 shadow-xl shadow-black/30 rounded-lg">
                        <div className="flex flex-col w-full rounded-t-lg" id="listTech">
                            {formation.lecons as Lecon[] && formation.lecons.length > 0 && formation.lecons.map((lecon) => {
                                return (
                                    <Link href={`/admin/lecons/${lecon.id}`} className="w-full flex flex-row justify-between px-24 py-6 bg-white shadow-md mt-1 transition hover:bg-[#0E6070]/20" key={lecon.id}>
                                        <p className="text-base font-bold tracking-tight text-[#0E6073] self-start">{lecon.title}</p>
                                        <p className="ml-2 text-sm font-Inter text-[#989898]">{lecon.etapes.length} étape(s)</p>
                                        <button
                                            onClick={() => {
                                                delLecon.mutateAsync({ id: lecon.id });
                                                window.location.reload()
                                            }}
                                            className="rounded-full font-semibold text-red-600 no-underline">
                                            <HiXMark className="text-[1.5rem] text-black hover:text-red-500" />
                                        </button>
                                    </Link>)
                            })}
                        </div>
                        <Link href={`/admin/formations/${formation.id}/addLesson`} className="flex items-center justify-center h-[5rem] w-full bg-[#2ea3a5] text-white hover:cursor-pointer transition hover:bg-[#0e6073] rounded-b-lg">
                            + Ajouter une lecon
                        </Link>
                    </div>
                </aside>

                <Header selected={3} />

                {tab === "modif" &&
                    <div className="fixed w-full h-full bg-[#0E6073]/90 top-0 right-0 left-0 bottom-0 flex justify-center items-center">
                        <form onSubmit={handleFormation} className="relative flex flex-col gap-5 item-center justify-start bg-white rounded-xl p-16 w-1/2" method="POST">
                            <button onClick={(e) => setTab("normal")} className="absolute top-3 right-4 rounded-full font-semibold  no-underline transition hover:text-red-500">
                                <HiXMark className="text-[2rem] text-[#0e6073] hover:text-red-500" />
                            </button>

                            <input name="formTitle" id="formTitle" type="text" placeholder="Titre de la formation" required className="inputAddForm" autoComplete="off" defaultValue={formation.title} />

                            <QuillNoSSRWrapper theme="snow" onChange={setContent} placeholder="Description" className="h-[30%] shadow-xl" defaultValue={formation.description} />
                            <fieldset className="mt-8 flex gap-5 w-full justify-center">
                                <legend>Difficulté:</legend>
                                <div className="flex flex-col items-center gap-2">
                                    <label htmlFor="1" className="mt-8">Débutant</label>
                                    <input type="radio" name="difficulte" id="1" value="1" required className="shadow-none" />
                                </div>

                                <div className="flex flex-col items-center gap-2">
                                    <label htmlFor="2" className="mt-8">Intermédiaire</label>
                                    <input type="radio" name="difficulte" id="2" value="2" required className="shadow-none" />
                                </div>

                                <div className="flex flex-col items-center gap-2">
                                    <label htmlFor="3" className="mt-8">Avancé</label>
                                    <input type="radio" name="difficulte" id="3" value="3" required className="shadow-none" />
                                </div>
                            </fieldset>

                            <button className="rounded-full bg-[#0E6073] px-10 py-3 font-semibold text-white no-underline transition hover:bg-[#0E6073]/80" type="submit" value="submit">Sauvegarder les changements</button>

                        </form>
                    </div>}
            </main>
        </>
    );
};

export default Formations;