import { type NextPage } from 'next';
import { GetServerSideProps } from 'next'
import { InferGetServerSidePropsType } from 'next'
import { getServerSession } from "next-auth";
import Head from "next/head";
import Link from "next/link";
import { getSession, signIn, signOut, useSession } from "next-auth/react";
import { FaArrowLeft, FaVideo } from "react-icons/fa";

import { api } from "~/utils/api";
import { prisma } from '~/server/db';
import { Etape, EtapeType, Lecon } from '@prisma/client';
import Header from '~/pages/components/header';

export const getServerSideProps: GetServerSideProps<{
    lecon: Lecon;
}> = async function (context) {

    const session = await getSession(context)
    const admin = session?.user.admin

    const lecon = await prisma.lecon.findUnique({
        where: {
            id: context.query.id as string
        },
    });
    const idf = lecon?.idf;

    if (!session || !admin) {
      return {
        redirect: {
          destination: '/',
          permanent: false,
        },
      }
    }
    else {
        
        return {
            props: {
                lecon: JSON.parse(JSON.stringify(lecon)) as Lecon
            }
        };
    }
    
};

const etapes: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ lecon }) => {
    const { data: sessionData } = useSession();
    const admin = sessionData?.user.admin

    const { data: typeList } = api.type.getAll.useQuery()

    const idL = lecon.id
    const idf = lecon.idf
    const addEtape = api.etape.create.useMutation()
    const { data: etapes } = api.etape.getAll.useQuery({ id: idL })

    async function handleEtape(event: React.SyntheticEvent) {
        //event.preventDefault()
        const target = event.target as typeof event.target & {
            etapeName: { value: string };
            idt: { value: string };
            description: { value: string };
            code: { value: string };
        };
        const name = target.etapeName.value;
        const idt = target.idt.value;
        const desc = target.description.value;
        const code = target.code.value;
        await addEtape.mutateAsync({ name: name, idt: idt, description: desc, code: code, idl: idL })
    }

    return (
        <>
            <Head>
                <title>{lecon.title}</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/okto.png" />
            </Head>

            <main className="flex min-h-screen flex-col items-center bg-white">

                <div className="container flex flex-col items-start justify-start gap-12 px-4 py-20">
                    <div className="flex flex-row items-center justify-between px-10 w-7/12">
                        <div className="flex flex-row items-center justify-start">
                            <button className="mr-5"><Link href={`/formation`}><FaArrowLeft className="h-6 w-6 text-[#0E6073]" /></Link></button>
                            <h1 className="text-3xl font-bold tracking-tight text-[#0E6073]">{lecon.title}</h1>
                        </div>
                    </div>
                    <div className="flex flex-col items-center pr-10 w-7/12">
                            <div className="flex flex-row items-center justify-between w-full">
                                <h3 className="text-xl font-bold tracking-tight text-[#0E6073]">Description</h3>
                                <div className="flex flex-row ">
                                    <div className="flex flex-row items-center ml-4">
                                        <FaVideo className="h-7 w-7 text-[#989898]" />
                                        <p className="ml-2 text-sm font-Inter text-[#989898]">Cours vidéo</p>
                                    </div>
                                </div>
                            </div>
                            <div className="text-sm font-Inter text-[#222222] self-start mt-3" dangerouslySetInnerHTML={{ __html: lecon.description }} />
                            <button className="text-white w-4/12 bg-[#0E6073] h-14 rounded-full my-3 self-end mt-3 hover:bg-[#0a4654]">
                                Voir la vidéo du cours
                            </button>
                            <div className="flex flex-row items-center justify-between w-full">
                                <h3 className="text-xl font-bold tracking-tight text-[#0E6073]">Transcript</h3>
                            </div>
                    </div>
                </div>
            </main>
            <Header selected={3}/>
        </>
    );
};

export default etapes;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <div className="flex flex-col items-center justify-center gap-4">
            <p className="text-center text-2xl text-white">
                {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
            </p>
            {sessionData?.user.admin && <Link href="/components/admin"><button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20">Admin</button></Link>}
            <button
                className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
                {sessionData ? "Sign out" : "Sign in"}
            </button>
        </div>
    );
};