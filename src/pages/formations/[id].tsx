import { type NextPage } from 'next';
import { type GetServerSideProps } from 'next'
import { type InferGetServerSidePropsType } from 'next'
import Head from "next/head";
import Link from "next/link";
import Image from 'next/image'
import { getSession, signIn, signOut, useSession } from "next-auth/react";
import { FaArrowLeft, FaPenAlt, FaPlay } from "react-icons/fa";

import { api } from "~/utils/api";
import Header from "../components/header";
import { prisma } from '~/server/db';
import { Technologie, type Formation, Lecon, Prisma, Progression, Session, Etape } from '@prisma/client';
import { DifficultyText } from '../components/difficulties';
import Title from '../components/title';
import Openable from '../components/openable';
import { type Session as SessionAuth } from 'next-auth';
import { useState } from 'react';
import Router from 'next/router';
import { IoCheckmarkCircle } from 'react-icons/io5';

type LeconWithEtapes = Prisma.LeconGetPayload<{
    include: { etapes: true, Progression: true }
}>

export const getServerSideProps: GetServerSideProps<{
    formation: (Formation & {
        techs: Technologie[];
        lecons: LeconWithEtapes[];
    });
}> = async function (context) {
    const session = await getSession(context)
    let formation;

    if (session) {
        formation = await prisma.formation.findUnique({
            where: {
                id: context.query.id as string
            },
            include: {
                techs: true,
                lecons: {
                    include: {
                        etapes: true,
                        Progression: {
                            where: {
                                idU: session!.user.id
                            }
                        }
                    }
                }
            }
        });
    }
    else {
        formation = await prisma.formation.findUnique({
            where: {
                id: context.query.id as string
            },
            include: {
                techs: true,
                lecons: {
                    include: {
                        etapes: true,
                    }
                }
            }
        });
    }
    if (formation===null) {
        return {
            redirect: {
                destination: '/formations',
                permanent: false,
            },
        }
    }
    return {
        props: {
            formation: JSON.parse(JSON.stringify(formation)) as (Formation & {
                techs: Technologie[];
                lecons: LeconWithEtapes[];
            }),
        }
    };
};

const Formations: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ formation }) => {
    const { data: session } = useSession()
    const admin = session?.user.admin

    const addProgression = api.progression.create.useMutation()

    const idf = formation.id

    const [select, setSelected] = useState("")

    const delFormation = api.formation.delete.useMutation()
    const one = api.progression.getOne.useMutation()

    async function handleProgression(idl: string) {
        if (formation && session) {
            const test = await one.mutateAsync({ idu: session.user.id, idL: idl, idF: formation.id })
            if (!test) {
                await addProgression.mutateAsync({ idu: session.user.id, idL: idl, idF: formation.id })
            }
        }
    }

    return (
        <>
            <Head>
                <title>{formation.title}</title>
                <meta name="description" content="Generated by create-t3-app" />
            </Head>

            <main className="flex min-h-screen flex-col items-center bg-white dark:bg-[#082F38]">

                <div className="container flex flex-col items-start justify-start gap-12 px-4 py-20">
                    <Title title={formation.title} link='formations' />

                    <div className="flex flex-col items-center pr-10 w-9/12">
                        <div className="flex flex-row items-center justify-between w-full">
                            <h1 className="text-xl font-bold tracking-tight text-[#0E6073] dark:text-[#1A808C]">Description</h1>
                            <div className="flex flex-row ">
                                <div className="flex flex-row items-center">
                                    {<DifficultyText level={formation.difficulte} />}
                                </div>
                                <div className="flex flex-row items-center ml-4">
                                    <FaPenAlt className="h-7 w-7 text-[#989898]" />
                                    <p className="ml-2 text-sm font-Inter text-[#989898]">{formation.lecons.length} leçons</p>
                                </div>
                            </div>
                        </div>
                        <div className="text-sm font-Inter text-[#222222] self-start mt-3" dangerouslySetInnerHTML={{ __html: formation.description }} />
                        {formation.lecons.length !== 0 ? <Link href={`/lecons/${formation.lecons[0]?.id}`} className="text-white w-3/12 bg-[#0E6073] h-14 rounded-full my-3 self-end mt-3 hover:bg-[#0a4654] flex flex-row justify-center items-center">Commencer</Link> : <></>}

                        <h1 className="text-xl font-bold tracking-tight text-[#0E6073] self-start mb-3 dark:text-[#1A808C]">Vue d'ensemble</h1>

                        <div className="w-10/12 shadow-lg">
                            {formation.lecons as LeconWithEtapes[] && formation.lecons.length > 0 && formation.lecons.map((lecon) => {
                                return (
                                    <div className="bg-white dark:bg-[#041F25] w-full mt-1 h-fit flex flex-col justify-start shadow-[4px_10px_20px_1px_rgba(0,0,0,0.25)]" key={lecon.id}>
                                        {select === lecon.id ?
                                            <>
                                                <div className="bg-white dark:bg-[#05262E] w-full h-fit flex flex-col items-center justify-center px-16 py-8 shadow-[4px_10px_20px_1px_rgba(0,0,0,0.25)]" onClick={(e) => setSelected("")}>
                                                    <div className="w-full flex flex-row items-center justify-between">
                                                        <p className="font-semibold text-[#0E6073] dark:text-[#1A808C]">{lecon.title}</p>
                                                        <div className="hover:cursor-pointer" onClick={() => {
                                                            handleProgression(lecon.id);
                                                            Router.push(`/lecons/${lecon.id}`)
                                                        }}>
                                                            {lecon.Progression.every((item) => item.finish) ? <IoCheckmarkCircle className="h-7 w-7 text-[#0E6073] dark:text-[#1A808C]" /> : <FaPlay className="h-5 w-5 text-[#0E6073] dark:text-[#1A808C]" />}
                                                        </div>
                                                    </div>
                                                    {lecon.description && select && <div className="text-sm font-Inter text-[#989898] text-left w-full" dangerouslySetInnerHTML={{ __html: lecon.description }} />}
                                                </div>

                                                <div className="w-full mt-2 mb-4">
                                                    {lecon.etapes as Etape[] && lecon.etapes.length > 0 && lecon.etapes.map((etape) => {
                                                        return (<p className="px-20 mt-2 font-semibold text-[#0E6073]">{etape.name}</p>)
                                                    })}
                                                </div>
                                            </>
                                            :
                                            <div className="bg-white dark:bg-[#05262E] w-full h-fit flex flex-row items-center justify-between px-16 py-8 shadow-[4px_10px_20px_1px_rgba(0,0,0,0.25)] hover:cursor-pointer" onClick={() => setSelected(lecon.id)}>
                                                <p className="font-semibold text-[#0E6073] dark:text-[#1A808C]">{lecon.title}</p>
                                                <div className="hover:cursor-pointer" onClick={() => {
                                                    handleProgression(lecon.id);
                                                    Router.push(`/lecons/${lecon.id}`)
                                                }}>
                                                    {lecon.Progression.every((item) => item.finish) ? <IoCheckmarkCircle className="h-7 w-7 text-[#0E6073] dark:text-[#1A808C]" /> : <FaPlay className="h-5 w-5 text-[#0E6073] dark:text-[#1A808C]" />}
                                                </div>
                                            </div>
                                        }
                                    </div>)
                            })}
                        </div>

                    </div>

                    <div className="w-3/12 absolute right-0 flex flex-col items-center justify-between h-5/6 pt-10 mr-5">
                        {formation.techs[0] && formation.techs[0].logo && <img src={formation.techs[0].logo} width="100" height="100" className="w-7/12" alt="" />}
                        {admin &&
                            <div>
                                <Link href={`/admin/formations/${formation.id}`}>
                                    <button className="text-white w-full bg-[#2EA3A5] h-14 rounded-full my-3 hover:bg-[#27888a]">
                                        Modifier les données du cours
                                    </button>
                                </Link>
                                <button onClick={() => { delFormation.mutateAsync({ id: formation.id }); window.location.reload() }} className="text-white w-full bg-[#920000] h-14 rounded-full my-3 hover:bg-[#6e0000]">
                                    Supprimer
                                </button>
                            </div>
                        }
                    </div>
                </div>
                <Header selected={2} />
            </main >
        </>
    );
};

export default Formations;