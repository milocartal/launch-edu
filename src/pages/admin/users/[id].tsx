import { GetServerSideProps, InferGetServerSidePropsType, type NextPage } from 'next';
import Head from "next/head";
import { Difficulty, DifficultyText } from "~/pages/components/difficulties"
import { FaCheck, FaPenAlt, FaPlay } from "react-icons/fa";

import Header from './../../components/header';
import { useState } from 'react';
import Title from './../../components/title';

import { Prisma, User } from '@prisma/client';
import { getSession, useSession } from 'next-auth/react';
import { prisma } from '~/server/db';
import Link from 'next/link';
import { api } from '~/utils/api';

type ProgressionWithFormation = Prisma.ProgressionGetPayload<{
    include: {
        formation: {
            include: {
                lecons: {
                    include: {
                        Progression: true
                    }
                },
                techs: true
            }
        },
        lecon: true
    }
}>

export const getServerSideProps: GetServerSideProps<{
    progression: ProgressionWithFormation[] | null,
    user: User
}> = async function (context) {

    const session = await getSession(context)

    if (session && session.user.admin) {
        const progression = await prisma.progression.findMany({
            where: {
                idU: context.query.id as string
            },
            include: {
                formation: {
                    include: {
                        lecons: {
                            include: {
                                Progression: {
                                    where: {
                                        idU: context.query.id as string
                                    }
                                }
                            }
                        },
                        techs: true
                    }
                },
            },
        })

        const groupedProgress = progression.reduce((previous: any, current) => {
            if (!previous[current.formation.id]) previous[current.formation.id] = [];
            previous[current.formation.id].push(current);
            return previous;
        }, {})

        const result = Object.entries(groupedProgress).map((item: any) => {
            const refValue = item[1][0];
            refValue.finish = item[1].every((element: any) => element.finish)
            return refValue;
        })

        const user = await prisma.user.findUnique({
            where: {
                id: context.query.id as string
            }
        })

        if (progression) {
            return {
                props: {
                    progression: JSON.parse(JSON.stringify(result)) as ProgressionWithFormation[],
                    user: JSON.parse(JSON.stringify(user)) as User,
                }
            }
        }
        else {
            return {
                props: {
                    progression: null,
                    user: JSON.parse(JSON.stringify(user)) as User,
                }
            }
        }
    }
    else {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }
};

const Dashboard: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ progression, user }) => {
    const session2 = useSession()

    const setAdmin = api.user.setAdmin.useMutation()
    const unsetAdmin = api.user.unSetAdmin.useMutation()

    const [selected, setSelected] = useState("")

    const [admin, setBool] = useState(() => {
        let difi;
        switch (user.admin) {
            case true:
                difi = true;
                break;
            case false:
                difi = false
                break;
            default:
                difi = false
                break;
        }
        return difi
    })

    async function handleAdmin(event: React.SyntheticEvent){
        if(admin){
            await setAdmin.mutateAsync({id: user.id})
        }
        else{
            await unsetAdmin.mutateAsync({id: user.id})
        }
        window.location.reload()
    }

    return (
        <>
            <Head>
                <title>Gestion du profil de {user.name}</title>
                <meta name="description" content="Generated by create-t3-app" />
            </Head>

            <main className="flex min-h-screen bg-white flex flex-col pb-20 dark:bg-[#082F38]">
                <div className="flex flex-col items-start justify-start pl-28 pt-20 pr-6 w-9/12">
                    <Title title={`Cours commencé(s)`} link={''} />

                    {progression && progression.map((item) => {
                        if (!item.finish) return (
                            selected === item.idF ?
                                <div className="flex flex-row items-start justify-between w-full gap-3 rounded-xl bg-white dark:bg-[#041F25] py-7 pr-10 mt-6 shadow-[0px_10px_30px_0px_rgba(0,0,0,0.25)] relative" onClick={() => setSelected(item.idF)} key={item.idF}>
                                    <div className="flex flex-col justify-end max-w-20 max-h-20 -top-4 -left-5 absolute">
                                        {item.formation.techs && item.formation.techs[0] && <img src={item.formation.techs[0].logo} width="80" height="80" alt="" />}
                                    </div>
                                    <div className="ml-20 flex flex-col justify-start items-start w-11/12">
                                        <h3 className="font-bold text-[#0E6073] dark:text-[#2EA3A5] mb-3 text-lg">{item.formation.title}</h3>

                                        <div className="text-sm font-Inter text-[#989898] text-left" dangerouslySetInnerHTML={{ __html: item.formation.description }} />
                                        {item.formation.lecons?.map((lesson) => {
                                            return (
                                                <div key={lesson.id} className="w-full flex flex-col items-center justify-center">
                                                    <div className="flex flex-row justify-between items-center py-6 w-11/12">
                                                        <h3 className="font-bold text-[#0E6073] text-sm">{lesson.title}</h3>
                                                        <Link href={`/lecons/${lesson.id}`}>{lesson.Progression && lesson.Progression[0] && lesson.Progression[0].idU === session2.data?.user.id && lesson.Progression[0].finish ? <FaCheck className="h-6 w-6 text-[#0E6073]" /> : <FaPlay className="h-6 w-6 text-[#0E6073]" />}</Link>
                                                    </div>
                                                    <div className="w-11/12 h-0.5 bg-[#989898] dark:bg-[#0E6073] self-center"></div>
                                                </div>)
                                        }
                                        )}
                                    </div>
                                    <div className="flex flex-col justify-start h-full items-start w-2/12">
                                        <DifficultyText level={item.formation.difficulte} />
                                        <div className="flex flex-row justify-start items-center mt-5">
                                            <FaPenAlt className="h-7 w-7 text-[#989898] dark:text-[#2EA3A5]" />
                                            <p className="text-sm ml-3 font-Inter text-[#989898] dark:text-[#2EA3A5]">{item.formation.lecons.length} leçons</p>
                                        </div>
                                    </div>
                                </div> :
                                <div className="flex flex-row items-start justify-between w-full gap-3 rounded-xl bg-white dark:bg-[#041F25] py-7 pr-10 mt-6 shadow-[0px_10px_30px_0px_rgba(0,0,0,0.25)] relative" onClick={() => setSelected(item.idF)} key={item.idF}>
                                    <div className="flex flex-col justify-end max-w-20 max-h-20 -top-4 -left-5 absolute">
                                        {item.formation.techs && item.formation.techs[0] && <img src={item.formation.techs[0].logo} width="80" height="80" alt="" />}
                                    </div>
                                    <div className="ml-20 flex flex-col justify-start items-start w-11/12">
                                        <h3 className="font-bold text-[#0E6073] dark:text-[#2EA3A5] mb-3 text-lg">{item.formation.title}</h3>
                                        <div className="text-sm font-Inter text-[#989898] text-left" dangerouslySetInnerHTML={{ __html: item.formation.description }} />
                                    </div>
                                    <div className="flex flex-col justify-start items-start h-full w-2/12">
                                        <DifficultyText level={item.formation.difficulte} />
                                        <div className="flex flex-row justify-start items-center mt-5">
                                            <FaPenAlt className="h-7 w-7 text-[#989898] dark:text-[#2EA3A5]" />
                                            <p className="text-sm ml-3 font-Inter text-[#989898] dark:text-[#2EA3A5]">{item.formation.lecons.length} leçons</p>
                                        </div>
                                    </div>
                                </div>)
                    }
                    )}
                </div>
                <div className="flex flex-col items-start justify-start pl-28 pt-10 pr-6 w-9/12">
                    <Title title={`Cours terminé(s)`} link={''} />

                    {progression && progression.map((item) => {
                        if (item.finish) {
                            return (
                                <div className="flex flex-row items-start justify-between w-full gap-3 rounded-xl bg-white dark:bg-[#041F25] py-7 pr-10 mt-6 shadow-[0px_10px_30px_0px_rgba(0,0,0,0.25)] relative" onClick={() => setSelected(item.idF)} key={item.idF}>
                                    <div className="flex flex-col justify-end max-w-20 max-h-20 -top-4 -left-5 absolute">
                                        {item.formation.techs && item.formation.techs[0] && <img src={item.formation.techs[0].logo} width="80" height="80" alt="" />}
                                    </div>
                                    <div className="ml-20 flex flex-col justify-start items-start w-11/12">
                                        <h3 className="font-bold text-[#0E6073] dark:text-[#2EA3A5] mb-3 text-lg">{item.formation.title}</h3>
                                        <div className="text-sm font-Inter text-[#989898] text-left" dangerouslySetInnerHTML={{ __html: item.formation.description }} />
                                    </div>
                                    <div className="flex flex-col justify-start items-start h-full w-2/12">
                                        <DifficultyText level={item.formation.difficulte} />
                                        <div className="flex flex-row justify-start items-center mt-5">
                                            <FaPenAlt className="h-7 w-7 text-[#989898] dark:text-[#2EA3A5]" />
                                            <p className="text-sm ml-3 font-Inter text-[#989898] dark:text-[#2EA3A5]">{item.formation.lecons.length} leçons</p>
                                        </div>
                                    </div>
                                </div>)
                        }
                    })}
                </div>

                <form onSubmit={handleAdmin} className="w-3/12 bg-[#0E6073] fixed right-0 flex flex-col items-center justify-start h-full pt-24 px-10 gap-2" method='POST'>
                    <h3 className="font-bold text-white mb-5 w-full">Profil de {user.name}</h3>
                    {user.image && <img src={user.image} className="w-32 h-32 rounded-full object-cover"></img>}
                    <h3 className="text-xl font-bold tracking-tight text-white">{user.name}</h3>
                    <p className="text-base tracking-tight text-[#989898] dark:text-[#63AEAB]">{user.email}</p>

                    <div className="w-full flex gap-4 justify-center text-white py-4">
                        <label className="switch">
                            <input type="checkbox" className="chk" onClick={() => admin ? setBool(false) : setBool(true)} defaultChecked={admin}/>
                            <span className="slider"></span>
                        </label>
                        <div className="flex flex-col h-full justify-between">
                            <label>Non Admin</label>
                            <label>Admin</label>
                        </div>
                    </div>
                    <button className="flex justify-center items-center text-white bg-[#2EA3A5] h-14 rounded-full hover:bg-[#1e818c] mb-3 px-4" type="submit" value="submit">Enregistrer les modifications</button>
                </form>
                <Header selected={1} />
            </main>
        </>
    );
};

export default Dashboard;