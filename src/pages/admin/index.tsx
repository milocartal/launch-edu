import { GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { getSession, signIn, signOut, useSession } from "next-auth/react";
import { type Session as SessionAuth } from 'next-auth'

import { api } from "~/utils/api";
import { EtapeType, Formation, Session, Technologie, User } from "@prisma/client";
import { DifficultyText } from "~/pages/components/difficulties"
import Header from "../components/header"

import dynamic from "next/dynamic";
import { MouseEventHandler, useState } from "react";

import { HiXMark } from "react-icons/hi2"
import { HiMagnifyingGlass } from "react-icons/hi2";
import { BiUserCircle } from "react-icons/bi"
import { FaPenAlt } from "react-icons/fa";

const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

export const getServerSideProps: GetServerSideProps<{
    session: SessionAuth;
}> = async function (context) {
    const session = await getSession(context)
    const admin = session?.user.admin

    if (!session || !admin) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

    return {
        props: { session }
    }
};

const Admin: NextPage = () => {
    //document.getElementById("defaultOpen").click();

    const [content, setContent] = useState('');
    const [tab, setTab] = useState("tech")

    const { data: sessionData } = useSession();

    const admin = sessionData?.user.admin

    const addFormation = api.formation.create.useMutation()
    const delFormation = api.formation.delete.useMutation()
    const { data: formations } = api.formation.getAll.useQuery()

    return (
        <>
            <Head>
                <title>Administration</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/okto.png" />
            </Head>
            {admin ?

                <main className="flex min-h-screen bg-white justify-between dark:bg-[#041F25]">
                    <div className="w-3/12 bg-[#0E6073] fixed right-0 flex flex-col items-start justify-start h-full pt-24 px-10">
                        <Link href="/admin/addFormation"><button>Créer une formation</button></Link>
                    </div>

                    <div className="flex flex-col items-start justify-start gap-12 pl-28 pt-20 pr-6 w-9/12">
                        <div className="flex flex-row items-center w-fit">
                            <div className="flex flex-row items-center justify-start">
                                <h1 className="text-3xl font-bold tracking-tight text-[#0E6073]">Gérez vos cours</h1>
                            </div>
                        </div>
                        <div className="flex flex-col w-full">
                            {formations as Formation[] && formations && formations.length > 0 && formations.map((forma) => {
                                let hide: string;
                                if (forma.hidden)
                                    hide = "Non postée"
                                else
                                    hide = "Postée"
                                return (
                                    <Link
                                        className="flex flex-row justify-between items-center mb-1 w-full bg-white shadow-[4px_5px_12px_6px_rgba(0,0,0,0.25)] py-2 pl-16 pr-6 justify-between hover:bg-[#ebebeb]/20 h-[5rem]"
                                        href={`/admin/formations/${encodeURIComponent(forma.id)}`}
                                        key={forma.id}
                                    >
                                        <h3 className="text-md font-bold text-[#0E6073]">{forma.title}</h3>

                                        <span className="flex flex-row items-center justify-between w-5/12">
                                            <DifficultyText level={forma.difficulte} />
                                            <span className="flex flex-row items-center">
                                                <FaPenAlt className="h-6 w-6 text-[#989898]" />
                                                <p className="ml-2 text-sm font-Inter text-[#989898]">{forma.lecons.length} leçon(s)</p>
                                            </span>
                                            <img src={forma.techs[0].logo} alt="" className="max-h-[4rem]"/>
                                        </span>
                                    </Link>
                                )
                            })}
                        </div>
                    </div>
                    <Header selected={3} />


                </main> : <img src="https://media.discordapp.net/attachments/688793736620146689/915869475423813662/20210709_215217.gif" alt="Pas Admnin, Ratio"></img>

            }
        </>
    );
};

export default Admin;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <div>
            {sessionData ?
                <button className="rounded-full px-3 py-3 font-semibold  no-underline transition hover:bg-white/10" onClick={() => void signOut()}>
                    <img src="/arrow.png" className="max-w-[1.5rem]"></img>
                </button> :
                <button className="rounded-full px-2 py-3 font-semibold  no-underline transition hover:bg-white/10" onClick={() => void signIn()}>
                    <BiUserCircle className="text-[2rem] text-white" />
                </button>}
        </div>

    );
};
