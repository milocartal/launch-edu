import React, { useState, useEffect } from 'react';
import { type NextPage } from 'next';
import { type GetServerSideProps } from 'next'
import { type InferGetServerSidePropsType } from 'next'
import { FaPenAlt, FaEye, FaEyeSlash } from "react-icons/fa";
import Head from "next/head";
import { getSession, useSession } from "next-auth/react";

import { prisma } from '~/server/db';
import { type User } from '@prisma/client';
import Header from '../components/header';

export const getServerSideProps: GetServerSideProps<{
    user: User;
}> = async function (context) {

    const session = await getSession(context)

    const user = await prisma.user.findUnique({
        where: {
            id: context.query.id as string
        },
    });

    if (!session) {
      return {
        redirect: {
          destination: '/',
          permanent: false,
        },
      }
    }
    else {
        
        return {
            props: {
                user: JSON.parse(JSON.stringify(user)) as User
            }
        };
    }  
};

function updateProfile() {
    console.log("envoi")
}

const user: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ user }) => {
    const { data: sessionData } = useSession();
    const admin = sessionData?.user.admin

    
    const [username, setUsername] = useState("")
    const [email, setEmail] = useState("")
    const [password, setPassword] = useState("")
    const [confirmPassword, setConfirmPassword] = useState("")
    const [passwordTest, setPasswordTest] = useState(true)
    const [passwordShown, setPasswordShown] = useState(false)

    useEffect(() => {
      if (password === confirmPassword){
          setPasswordTest(true)
      } else { 
          setPasswordTest(false) 
      }
    }, [password, confirmPassword]);

    return (
        <>
            <Head>
                <title>Mon profil</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/okto.png" />
            </Head>

            <main className="flex flex-row min-h-screen bg-white justify-between px-10">
                <div className="flex max-h-screen flex-col items-center justify-center w-5/12 ml-20">
                    <div className="flex flex-col items-center justify-center h-full">
                        <div className="bg-[#e6e6e6] flex flex-row justify-center items-center mb-4 w-96 h-40 px-6 w-8/12 rounded-xl">
                            <button className="bg-[#0E6073] w-32 h-32 rounded-full flex justify-center items-center mr-5 text-transparent hover:text-[#fff]">
                                <FaPenAlt className="absolute h-9 w-9 text-inherit"/>
                                {sessionData && sessionData.user?.image && <img src={sessionData.user.image} className="w-32 h-32 rounded-full object-cover hover:opacity-30"></img>}
                                
                            </button>
                            <div>
                                {sessionData && sessionData.user?.image &&<h3 className="text-xl font-bold tracking-tight text-[#0E6073]">{sessionData.user.name}</h3>}
                                {sessionData && sessionData.user?.image &&<p className="text-base tracking-tight text-[#989898]">{sessionData.user.email}</p>}
                            </div>
                        </div>
                        <button className="w-8/12 bg-[#0E6073] h-14 rounded-full my-3 mt-5 hover:bg-[#0a4654]" type="submit" value="submit">
                            <p className="text-white">Mentions légales</p>
                        </button>
                        <button>
                            <p className="text-[#D00000]">Supprimer mon compte</p>
                        </button>
                    </div>
                </div>
                <div className="flex max-h-screen flex-col items-start justify-center w-5/12 mr-20">
                    <h1 className="text-xl font-bold tracking-tight text-[#0E6073] mb-8">Mettre à jour mon profil</h1>
                    <form onSubmit={updateProfile} className="flex flex-col items-center" method="POST">
                        <div className="bg-white flex flex-row justify-start items-center mb-4 w-96 h-14 px-6 shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-8/12">
                            <input className="bg-transparent w-full h-12" name="username" id="username" type="text" placeholder="Nom d'utilisateur" value={username} onChange={({ target }) => {setUsername(target.value)}} required></input>
                        </div>
                        <div className="bg-white flex flex-row justify-start items-center mb-4 w-96 h-14 px-6 shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-8/12">
                            <input className="bg-transparent w-full h-12" name="email" id="email" type="email" placeholder="Email" value={email} onChange={({ target }) => {setEmail(target.value)}} required></input>
                        </div>
                        <div className="bg-white flex flex-row justify-start items-center mb-4 w-96 h-14 px-6 shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-8/12">
                            <input className="bg-transparent w-full h-12" name="password" id="password" type={passwordShown ? "text" : "password"} placeholder="Nouveau mot de passe" minLength={8} pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Votre mot de passe doit contenir au moins une majuscule, une minuscule et un chiffre." value={password} onChange={({ target }) => {setPassword(target.value)}} required></input>
                            <button onClick={() => setPasswordShown(!passwordShown)}>
                                {passwordShown ? <FaEyeSlash className=" text-[#989898] h-6 w-6"/> : <FaEye className=" text-[#989898] h-6 w-6"/>}
                            </button>
                        </div>
                        <div className="bg-white flex flex-row justify-start items-center 2 w-96 h-14 px-6 shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-8/12">
                            <input className="bg-transparent w-full h-12" name="passwordConfirm" id="passwordConfirm" type={passwordShown ? "text" : "password"} placeholder="Confirmer mot de passe" value={confirmPassword} onChange={({ target }) => {setConfirmPassword(target.value)}} required></input>
                            <button onClick={() => setPasswordShown(!passwordShown)}>
                                {passwordShown ? <FaEyeSlash className=" text-[#989898] h-6 w-6"/> : <FaEye className=" text-[#989898] h-6 w-6"/>}
                            </button>
                        </div>
                        {!passwordTest && <p className="text-[#D00000]">Les deux mots de passe ne correspondent pas.</p>}

                        <button className="w-8/12 bg-[#0E6073] h-14 rounded-full my-3 self-center mt-5 hover:bg-[#0a4654]" type="submit" value="submit">
                            <p className="text-white">Mettre à jour</p>
                        </button>
                    </form>
                </div>
                <Header selected={4}/>
            </main>
        </>
    );
};

export default user;