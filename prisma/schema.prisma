// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Technologie {
    id         String      @id @default(cuid())
    name       String
    logo       String
    lien_doc   String?
    formations Formation[]
}

model EtapeType {
    id     String  @id @default(cuid())
    name   String  @unique
    etapes Etape[]
}

model Etape {
    id         String    @id @default(cuid())
    idt        String
    type       EtapeType @relation(fields: [idt], references: [id], onDelete: Cascade)
    name       String
    transcript String
    updatedAt  DateTime  @updatedAt
    video      String
    code       String
    idl        String
    lecon      Lecon     @relation(fields: [idl], references: [id], onDelete: Cascade)
}

model Lecon {
    id               String             @id @default(cuid())
    title            String
    idf              String
    description      String
    updatedAt        DateTime           @updatedAt
    hidden           Boolean            @default(false)
    etapes           Etape[]
    formation        Formation          @relation(fields: [idf], references: [id], onDelete: Cascade)
    Progression      ProgressionLecon[]
    ProgressionEtape ProgressionEtape[]
}

model Formation {
    id          String                 @id @default(cuid())
    title       String
    description String
    prof        String?
    difficulte  Int
    createdAt   DateTime               @default(now())
    updatedAt   DateTime               @updatedAt
    hidden      Boolean                @default(true)
    techs       Technologie[]
    lecons      Lecon[]
    Progression ProgressionFormation[]
    Prerequis   Formation[]            @relation("Prerequis")
    PrerequisBy Formation[]            @relation("Prerequis")
}

model ProgressionFormation {
    idU         String
    user        User      @relation(fields: [idU], references: [id], onDelete: Cascade)
    idF         String
    formation   Formation @relation(fields: [idF], references: [id], onDelete: Cascade)
    started     Boolean
    finish      Boolean
    pourcentage Decimal

    @@unique([idU, idF])
}

model ProgressionLecon {
    idU         String
    user        User    @relation(fields: [idU], references: [id], onDelete: Cascade)
    idL         String
    lecon       Lecon   @relation(fields: [idL], references: [id], onDelete: Cascade)
    started     Boolean
    finish      Boolean
    pourcentage Decimal

    @@unique([idU, idL])
}

model ProgressionEtape {
    idU         String
    user        User    @relation(fields: [idU], references: [id], onDelete: Cascade)
    idL         String
    lecon       Lecon   @relation(fields: [idL], references: [id], onDelete: Cascade)
    started     Boolean
    finish      Boolean

    @@unique([idU, idL])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String                 @id @default(cuid())
    name                 String?
    email                String?                @unique
    emailVerified        DateTime?
    image                String?
    admin                Boolean                @default(false)
    accounts             Account[]
    sessions             Session[]
    ProgressionFormation ProgressionFormation[]
    ProgressionLecon     ProgressionLecon[]
    ProgressionEtape     ProgressionEtape[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
